probabilistic logic and statistical inference 

you measured the petal lengths of 50 flowers of certain species 

probabilistic reasoning allows us to describe uncertainty

what would the mean be if the measurements are repeated again and again. This is the heart of statistical inference

Your data speak in the language of probability


Random number generators and hacker statistics 

The basic idea is instead of literally repeating the data acquisition over and over again, we can simulate those repeated measurements using python 

np.random module

suite of functions based on pseudo random number generation 

np.random.random()

draws a number between 0 and 1

Bernoulli trial : experiment that has two options : True or False 

np.random.seed()


import numpy as np
np.random.seed(42)
random_numbers = np.random.random(size=4)
random_numbers

array([0.374,0.9507,0.73,0.59])

heads = random_numbers<0.5

heads
array([True,False,False,False],dtype=bool)
np.sum(heads)
1


n_all_heads = 0 #intialize the number of 4 heads trials 
for _ in range(10000):
	heads = np.random.random(size=4) < 0.5
	n_heads = np.sum(heads)
	if n_heads == 4:
		n_all_heads += 1

n_all_heads/10000
0.0621


Hacker stats probabilities 

determine how to simulate the data 
simulate many many times 

probability is just fraction of trials with outcome of interest

# Seed the random number generator
np.random.seed(42)

# Initialize random numbers: random_numbers
random_numbers = np.empty(100000)

# Generate random numbers by looping over range(100000)
for i in range(100000):
    random_numbers[i] = np.random.random()

# Plot a histogram
_ = plt.hist(random_numbers)

# Show the plot
plt.show()


histogram is exactly flat across the top indicating that there is a equal chance that a number is generated between 0,1



def perform_bernoulli_trials(n, p):
    """Perform n Bernoulli trials with success probability p
    and return number of successes."""
    # Initialize number of successes: n_success
    n_success = 0

    # Perform trials
    for i in range(n):
        # Choose random number between zero and one: random_number
        random_number = np.random.random()

        # If less than p, it's a success so add one to n_success
        if random_number<p:
            n_success+=1

    return n_success

You can think of a Bernoulli trial as a flip of a possibly biased coin.
Specifically, each coin flip has a probability p of landing heads (success) and probability 1âˆ’p of landing tails (failure)


how many defaults might we expect 
Lets say a bank made 100 mortgage loans. It is possible that anywhere between 0 and 100 of the loans will be defaulted upon. 
You would like to know the probability of getting a given number of defaults, given that the probability of a default is p = 0.05. 
To investigate this, you will do a simulation. You will perform 100 Bernoulli trials using the perform_bernoulli_trials() function you wrote
in the previous exercise and record how many defaults we get. Here, a success is a default. (Remember that the word "success" just means that 
the Bernoulli trial evaluates to True, i.e., did the loan recipient default?) You will do this for another 100 Bernoulli trials.
And again and again until we have tried it 1000 times. Then, you will plot a histogram describing the probability of the number of defaults.

# Seed random number generator
np.random.seed(42)

# Initialize the number of defaults: n_defaults
n_defaults = np.empty(1000)

# Compute the number of defaults
for i in range(1000):
    n_defaults[i] = perform_bernoulli_trials(100,0.05)


# Plot the histogram with default number of bins; label your axes
_ = plt.hist(n_defaults, normed=True)
_ = plt.xlabel('number of defaults out of 100 loans')
_ = plt.ylabel('probability')

# Show the plot
plt.show()


This is not the best way to plot when the result is integers 


if interest rates are such that the bank will lose money if 10 or more loans are defaulted , probability that the bank will lose 

# Compute ECDF: x, y
x,y = ecdf(n_defaults)

# Plot the ECDF with labeled axes
plt.plot(x,y,marker='.',linestyle='none')
plt.xlabel("No of defaults")
plt.ylabel("probability")

# Show the plot
plt.show()

# Compute the number of 100-loan simulations with 10 or more defaults: n_lose_money
n_lose_money = np.sum(n_defaults >= 10)

# Compute and print probability of losing money
print('Probability of losing money =', n_lose_money / len(n_defaults))


As we might expect, we most likely get 5/100 defaults. But we still have about a 2% chance of getting 10 or more defaults out of 100 loans.

--------------------
if 10 coins are thrown, x - no of heads appear (random variable)
p(x=0) , p(x=1), p(x=2), p(x=3) .... p(x=10); these values are discrete and not continuous

probability distributions and stories : binomial distributions

PMF (probability mass function)

set of probabilities of discrete outcomes

discrete uniform PMF
person rolling a dice once 
x - number that appear on the dice (random variable)
p(x=1) = 1/6
p(x=2) = 1/6

probability distribution: A mathematical description of outcomes

binomial distribution: the story 
The number r of successes in n Bernoulli trials with probability p of success is Binomially distributed 
ncr * (p ^ r * (1-p) ^ n-r)  # ncr because we have to choose r success out of n; possible ways we can choose is ncr

(1+x)^5 = 5c0 (1-x)^5 + 5c1 x*(1-x)^4  + 5c2 x^2*(1-x)^3 + 5c3 x^3*(1-x)^2 + 5c4 x^4*(1-x) + 5c5 x^5


p = x
n = 5

(1+p)^n

p(r=0) 
p(r=1)
p(r=2)
p(r=3)
p(r=4) # 4 heads appear in 4 bernoulli trials
p(r=5)

The number r of heads in 5 coin flips with probability 0.5 of heads is Binomially distributed

np.random.binomial(5,0,5)

np.random.binomial(4,0.5) #similar to perform_bernoullina_trial
2

np.random.binomial(4,0.5,10)
array([4,3,2,1,1,0,3,2,3,0])  # how will u verify if p(r=3) in 4 flips is binomially distributed 4c3*p^3*(1-p) ; flip 100000 times 

#how will u verify if the probability of head = 0.5 ; by flipping the coin 100000 times and check the probability

To be able to plot binomial pmf , 10000 samples of 

samples = np.random.binomial(60,0.1,10000)

no of success = 60*0.1 = 6 out of 60

x axis -  no of successes
y axis -  probability


binomial cdf 

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
x,y = edcf(samples)
plt.plot(x,y,marker='.',linestyle='none')
plt.margins(0.02)
plt.xlabel('number of successes')
plt.ylabel('cdf')
plt.show()

----------------------

# Take 10,000 samples out of the binomial distribution: n_defaults
n_defaults = np.random.binomial(100,0.05,size=10000)

# Compute CDF: x, y
x,y = ecdf(n_defaults)

# Plot the CDF with axis labels
plt.plot(x,y,marker='.',linestyle='none')
plt.xlabel("no of defaults")
plt.ylabel("cdf")


# Show the plot
plt.show()

-------------------

# Compute bin edges: bins
bins = np.arange(0, max(n_defaults) + 1.5)-0.5

# Generate histogram
plt.hist(n_defaults,normed=True,bins=bins)

# Label axes
plt.xlabel("no of defaults")
plt.ylabel("pmf")


# Show the plot
plt.show()

--------------------

poisson process and poisson distribution

book information theory, statistical inference and machine learning 

David mckay described a town called poissonville where the buses have erratic schedule 

amount of time u have to wait for a bus is completely independent of when the previous bus arrived 

Arrival of buses in poisonville is called a poisson process 

Natural births in a given hospital 

well defined average number of natural births every year ; timing of one birth is independent of previous one 
Hit on a website during a given hour 
Meteor strikes
Molecular collisions in a gas 
Aviation incidents 
Buses in poisonville

Any process that matches the buses in poisonville story is a poison process

The number of arrivals of a poisson process in a given amount of time (range = infinite) [special parameter lamda = np n=infinite;p=small] is poisson distributed

THe number of heads appear in 4 bernoulli trials with p is binomially distributed

Poisson distribution has one parameter lamda , average number of arrivals in given length of time 

The number r of hits on a website in one hour with an average hit rate of 6 hits per hour is poisson distributed 

lamda ^ k * e ^ -lamda / k!

k - successes per period
lamda - average successes in given period 

poisson pmf 

x axis -> number of hits 
y axis -> probability

poisson distribution is a limit of binomial distribution for low probability of success and large number of trials ie rare events 

poisson cdf 

samples = np.random.poisson(6,size=100000)
x,y = ecdf(samples)
plt.plot(x,y,marker='.',linestyle='none')
plt.margins(0.02)
plt.show()

---------------------

https://medium.com/@andrew.chamberlain/deriving-the-poisson-distribution-from-the-binomial-distribution-840cc1668239
https://stattrek.com/probability-distributions/poisson.aspx
https://www.khanacademy.org/math/algebra2/exponential-and-logarithmic-functions/e-and-the-natural-logarithm/v/e-through-compound-interest


e = lt (1 + 1/n)^n #100% interest compounded every zillionth of a second 
	n -> infinite


np.random.poisson(10,10000)
array([6,4,12,3])


relationship between binomial and poisson distribution

# Draw 10,000 samples out of Poisson distribution: samples_poisson
samples_poisson = np.random.poisson(10,10000)

# Print the mean and standard deviation
print('Poisson:     ', np.mean(samples_poisson),
                       np.std(samples_poisson))

# Specify values of n and p to consider for Binomial: n, p
n = [20, 100, 1000]
p = [0.5, 0.1, 0.01]


# Draw 10,000 samples for each n,p pair: samples_binomial
for i in range(0,3):
    samples_binomial = np.random.binomial(n[i],p[i],10000)

    # Print results
    print('n =', n[i], 'Binom:', np.mean(samples_binomial),
                                 np.std(samples_binomial))

Poisson:      10.0186 3.144813832327758
n = 20 Binom: 9.9637 2.2163443572694206
n = 100 Binom: 9.9947 3.0135812433050484
n = 1000 Binom: 9.9985 3.139378561116833

-------------------

how many no hitters in a season 

In baseball, a no-hitter is a game in which a pitcher does not allow the other team to get a hit. 
This is a rare event, and since the beginning of the so-called modern era of baseball (starting in 1901), 
there have only been 251 of them through the 2015 season in over 200,000 games. The ECDF of the number of no-hitters in a season is shown to the right. 
Which probability distribution would be appropriate to describe the number of no-hitters we would expect in a given season?


was 2015 anomalous?

1990 and 2015 featured the most no-hitters of any season of baseball (there were seven). 
Given that there are on average 251/115 no-hitters per season, what is the probability of having seven or more in a season?

# Draw 10,000 samples out of Poisson distribution: n_nohitters
n_nohitters = np.random.poisson(251/115,10000)

# Compute number of samples that are seven or greater: n_large
n_large = np.sum(n_nohitters >= 7)

# Compute probability of getting seven or more: p_large
p_large = n_large/10000

# Print the result
print('Probability of seven or more no-hitters:', p_large)


The result is about 0.007. This means that it is not that improbable to see a 7-or-more no-hitter season in a century. 
We have seen two in a century and a half, so it is not unreasonable.


