sample mean and median 

THe mean for a given state is just the average percentage of votes across the counties 

import numpy as np 
np.mean(dem_share_PA)
45.47 

it is heavily influenced by outliers , or datapoints whose value is far greater or lesser than the rest of the data 

even though the majority of the counties in utah had less than 25% , the anamolous counties pull the mean higher up 

summary statistic that is immune to extreme data : median 

np.median(dem_share_UT)

------------

mean_length_vers= np.mean(versicolor_petal_length)
print('I. versicolor:', mean_length_vers, 'cm')


percentiles, outliers and box plots 

median is the special name for the 50 th percentile 

50% of the data is less than median 

50 th percentile is 41.8% percent vote for obama

25 th percentile is 37.3% percent vote 


computing percentile

np.percentile(df_swing['dem_share'],[25,50,75])

quantitative EDA meets graphical EDA : boxplot 


centre of the box is median 
edges of the box are 25 and 75 percentile

total height of the box contains the middle 50% of the data and is called interquartile range IQR 

whiskers extend a distance of 1.5*IQR or to the extent of data whichever is more extreme 

any points outside of the whiskers are plotted as individual points which we often demarcate as outliers

being more than 2 IQRs away from the median is a common criterion for outlier 


import matplotlib.pyplot as plt 
import seaborn as sns 
sns.boxplot(x='east_west',y='dem_share',data=df_all_states)
plt.xlabel('region')
plt.ylabel('percent of vote for obama')
plt.show()


# Specify array of percentiles: percentiles
percentiles = np.array([2.5,25,50,75,97.5])

# Compute percentiles: ptiles_vers
ptiles_vers = np.percentile(versicolor_petal_length,percentiles)

# Print the result
print(ptiles_vers)



comparing percentiles to EDF 

# Plot the ECDF
_ = plt.plot(x_vers, y_vers, '.')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Overlay percentiles as red diamonds.
_ = plt.plot(ptiles_vers, percentiles/100, marker='D', color='red',
         linestyle='none')

# Show the plot
plt.show()


---------------------
# Create box plot with Seaborn's default settings
sns.boxplot(x='species',y='petal length (cm)',data=df)

# Label the axes
plt.xlabel('species')
plt.ylabel('petal length (cm)')

# Show the plot
plt.show()

----------------

variance and standard deviation 

mean captures the magnitude of data , variance calculates the spread of data 

mean sqaured distance of the data from their mean 

computing the variance

np.var(dem_share_FL) #unit is not same as percent of vote for obama 

np.std(dem_share_FL)



# Array of differences to mean: differences
differences = versicolor_petal_length - np.mean(versicolor_petal_length)

# Square the differences: diff_sq
diff_sq = differences**2

# Compute the mean square difference: variance_explicit
variance_explicit = np.mean(diff_sq)

# Compute the variance using NumPy: variance_np
variance_np = np.var(versicolor_petal_length)

# Print the results
print(variance_explicit,variance_np)


--------------

# Compute the variance: variance
variance = np.var(versicolor_petal_length)

# Print the square root of the variance
print(np.sqrt(variance))

# Print the standard deviation
print(np.std(versicolor_petal_length))

--------------


covariance and pearson correlation coefficient 

we have more data than just the vote share for obama 
we also know the total number of votes in each county 

lets look at how these 2 quantities vary together 


scatter plot 

x axis : total votes 
y axis : percent of votes for obama 

countries with max population voted for obama 
most of the countries with small population voted for McCain 


plt.plot(total_votes/1000,dem_share,marker='.',linestyle='none')
plt.xlabel('total votes (thousands)')
plt.ylabel('percent of vote for obama')


how obamas vote share vary with the total vote count 

covariance : a measure of how 2 quantities vary each other 


meantotalvotes ; meanpercentforobama 

distance from meantotalvotes
distance from mean percent for obama 

covariance : mean of the product of these differences

if x and y both tend to be above or below; then the covariance is positive 

when the country is populous; it has more votes for obama 

pearson correlation coefficient: 

variance / std(x)*std(y)


variability due to codependence/ independent variability

ranges from [-1,1]

pearson correlation coefficient is a good metric for correlation between variables 

--------------

# Make a scatter plot
plt.plot(versicolor_petal_length,versicolor_petal_width,marker='.',linestyle='none')


# Label the axes
plt.xlabel('versicolor_petal_length (cm)')
plt.ylabel('versicolor_petal_width (cm)')

# Show the result
plt.show()

longer petals tend to wider 
--------------

# Compute the covariance matrix: covariance_matrix
covariance_matrix = np.cov(versicolor_petal_length,versicolor_petal_width)

# Print covariance matrix
print(covariance_matrix)

# Extract covariance of length and width of petals: petal_cov
petal_cov = covariance_matrix[0,1]

# Print the length/width covariance
print(petal_cov)


----------------
def pearson_r(x, y):
    """Compute Pearson correlation coefficient between two arrays."""
    # Compute correlation matrix: corr_mat
    corr_mat = np.corrcoef(x,y)

    # Return entry [0,1]
    return corr_mat[0,1]

# Compute Pearson correlation coefficient for I. versicolor: r
r = pearson_r(versicolor_petal_length,versicolor_petal_width)

# Print the result
print(r)

--------------

As mentioned in the video, the Pearson correlation coefficient, also called the Pearson r, is often easier to interpret than the covariance. 
It is computed using the np.corrcoef() function. Like np.cov(), it takes two arrays as arguments and returns a 2D array.
Entries [0,0] and [1,1] are necessarily equal to 1 (can you think about why?), and the value we are after is entry [0,1]

