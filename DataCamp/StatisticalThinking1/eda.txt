Introduction to exploratory data analysis

if u can display the data, you can start to draw conclusions from it 

Exploring the data is crucial step in analysis

The process of organizing, plotting and summarizing a dataset is EDA

EDA can never be a whole story but nothing else can be a foundation stone 

2008 US swing state election results 

state,country, total_votes, dem_votes, rep_votes,dem_share 


import pandas as pd
df_swing = pd.read_csv('2008_swing_states.csv')
df_swing[['state','country','dem_share']]

state 	country 	dem_share
PA 		Erie		60.08
PA 		Bradford 	40.64


a good field commander does not just charge into the battle without first getting a feel for terrain and sizing up the opposite army 

histogram

x axis -> percent of vote for obama 
y axis -> number of counties 


a good informative plot guides u the quantitative statiscal analysis 

--------------------
plotting a histogram

useful plot 

import matplotlib.pyplot as plt 

_ = plt.hist(df_swing['dem_share'])
_ = plt.xlabel('percent of vote for obama')
_ = plt.ylabel('number of counties')
plt.show()
we could also have passed numpy array 

bin_edges = [0,10,20,30,40,50,60,70,80,90,100]
_ = plt.hist(df_swing['dem_share'],bins=bin_edges)
plt.show()

i prefer to use default settings of seaborn , an excellent matplotlib based statiscal data visualization package 

setting seaborn styling 

import seaborn as sns 
sns.set()

Beyond this stylistic functionality, it also offers useful plotting functions 

# Import plotting modules
import matplotlib.pyplot as plt
import seaborn as sns


# Set default Seaborn style
sns.set()

# Plot histogram of versicolor petal lengths
plt.hist(versicolor_petal_length)  #numpy array of petal lengths

# Show histogram
plt.show()


-----------------------------

square root rule 

# Import numpy
import numpy as np

# Compute number of data points: n_data
datapoints = len(versicolor_petal_length)

# Number of bins is the square root of number of data points: n_bins
n_bins = np.sqrt(datapoints)

# Convert number of bins to integer: n_bins
n_bins = int(n_bins)

# Plot the histogram
plt.hist(versicolor_petal_length,bins=n_bins)

# Label axes
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('count')

# Show histogram
plt.show()

-------------------------

plotting all of the data : Bee swarm plots 

drawback of choosing histogram is same dataset can look differently depending upon the bins chosen 

binning bias ; we are not plotting all of the data; sweeping the data into bins and losing their actual values 

bee swarm plot of vote totals in three swing states 

Each point in the plot represents the share of vote obama got in a single county 

y axis -> quantitative informative
x axis -> state names 

no binning bias, all data is displayed 

dataframe 

column is a feature
row is a observation 


_ = sns.swarmplot(x='state',y='dem_share',data=df_swing) 
plt.xlabel('state')
plt.ylabel('percent of vote for obama ')
plt.show()



excercises 

df.head()

sepal length (cm)  sepal width (cm)   ...     petal width (cm)  species
0                5.1               3.5   ...                  0.2   setosa
1                4.9               3.0   ...                  0.2   setosa
2                4.7               3.2   ...                  0.2   setosa
3                4.6               3.1   ...                  0.2   setosa
4                5.0               3.6   ...                  0.2   setosa


# Create bee swarm plot with Seaborn's default settings
sns.swarmplot(x='species',y='petal length (cm)',data = df)

# Label the axes
plt.xlabel('species')
plt.ylabel('petal length (cm)')
# Show the plot
plt.show()


-----------------------

plotting all of the data: Empirical cumulative distribution functions 

county level voting for all the states east of missisipi river and all states west 

edges have overlapping data points 


ECDF 

percent of vote for obama : x axis 
ECDF : y axis (no of counties)

20% of the counties in swing state had 36% or less vote for obama 
75% of the counties had less than 50% vote for obama 

x axis : sort the percent of vote 

import numpy as np 
x = np.sort(df_swing['dem_share'])
y = np.arange(1,len(x)+1)/len(x)

plt.plot(x,y,marker='.',linestyle='none')
plt.xlabel('percent of vote for obama')
plt.ylabel('ECDF')

plt.margins(0.02) #keeps the data off the plot edges 

np.arrange creates evenly spaced values in the given range 

[1,2,3,.............100]/100
if len(x) = 100


The y data of the ECDF go from 1/n to 1 in equally spaced increments. 
You can construct this using np.arange(). Remember, however, that the end value in np.arange() is not inclusive. 
Therefore, np.arange() will need to go from 1 to n+1. Be sure to divide this by n.


def ecdf(data):
    """Compute ECDF for a one-dimensional array of measurements."""
    # Number of data points: n
    n = len(data)

    # x-data for the ECDF: x
    x = np.sort(data)

    # y-data for the ECDF: y
    y = np.arange(1,n+1) / n

    return x, y

---------------

# Compute ECDF for versicolor data: x_vers, y_vers
x_vers, y_vers = ecdf(versicolor_petal_length)

# Generate plot
plt.plot(x_vers,y_vers,marker='.',linestyle='none')

# Label the axes
plt.ylabel('ECDF')
plt.xlabel('versicolor_petal_length')

# Display the plot
plt.show()

-------------------

# Compute ECDFs
x_set,y_set = ecdf(setosa_petal_length)
x_vers,y_vers = ecdf(versicolor_petal_length)
x_virg,y_virg = ecdf(virginica_petal_length)

# Plot all ECDFs on the same plot
plt.plot(x_set,y_set,marker='.',linestyle='none')
plt.plot(x_vers,y_vers,marker='.',linestyle='none')
plt.plot(x_virg,y_virg,marker='.',linestyle='none')




# Annotate the plot
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Display the plot
plt.show()

-----------------

onward towards the whole story

histogram, bee swarm plot, ecdf 

quantitative EDA : computes useful summary statistics 

probability distribution for both discrete and continuous variables 

not get mired in mathematical details, numpy random module to simulate probabilistic stories and distributions 