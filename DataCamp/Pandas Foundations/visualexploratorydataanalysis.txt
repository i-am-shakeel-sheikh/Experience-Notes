Exploratory Data Analysis

Fisher's Iris flower data'

Famous dataset in pattern recognition
150 observations, 4 features each
1.sepal length
2.sepal width
3.petal length
4.petal width

3 species : setosa, versicolor, virginica


import pandas as pd
import matplotlib.pyplot as plt
iris = pd.read_csv('iris.csv',index_col=0)
print(iris.shape)
(150,5)

iris.head()

	sepal_length 	sepal_width 	petal_length 	petal_width 	species
0	5.1				3.5 			1.4 			0.2 			setosa
1   4.9 			3.0 			1.4 			0.2 			setosa

iris.plot(x = 'sepal_length', y= 'sepal_width')
plt.show()

for this unordered 4 dimensional dataset , line plot doesnâ€™t make any sense

iris.plot(x = 'sepal_length' , y='sepal_width', kind = 'scatter')
plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width(cm)')

individual variable distribution is more informative than plotting two variables against each other

iris.plot(y = 'sepal_length', kind ='box')
iris.ylabel('sepal width (cm)')

minimum, maximum with the whiskers, the interquartile range with the box edges and the median inside

iris.plot( y = 'sepal_length', kind = 'hist')
plt.xlabel('sepal length (cm)')

sepal_length vs frequency

The result approximates a probability distribution function or pdf of sepal length of all the iris flowers

Histogram options

bins
range 
normed 
cumulative 

iris.plot(y='sepal_length', kind ='hist', bins=30, range=(4,8),normed = True)

cdfs are used to compute the probability of observing a value in a given range 

cdf is smooth curve increasing from 0 to 1 

idioms 
iris.plot()
iris.plt.hist()
iris.hist()


MONTH AAPL IBM  
JAN		1 	2	
Feb		2	3
Mar 	4   5

---------
E1:
y_columns = ['AAPL','IBM']
df.plot(x= 'Month', y=y_columns)
plt.title('Monthly stock prices')
plt.ylabel('Price ($US)')
plt.show()

E2:
df.plot(kind='scatter', x='hp', y='mpg', s=sizes)
plt.title('Fuel efficiency vs Horse-power')
plt.xlabel('Horse-power')
plt.ylabel('Fuel efficiency (mpg)')
plt.show()

sizes is normalized weight of each automobile present in dataset

E3:
cols = ['weight','mpg']
df[cols].plot(kind='box',subplots=True)
plt.show()


E4:
# This formats the plots such that they appear on separate rows
fig, axes = plt.subplots(nrows=2, ncols=1)
df.fraction.plot(ax=axes[0], kind='hist', bins=30,normed=True, range=(0,.3))
plt.show()
df.fraction.plot(ax=axes[1], kind='hist', bins=30, cumulative=True, normed=True, range=(0,.3))
plt.show()

---------------------

Statistical exploratory data analysis
a statistic is a single number that summarizes a numerical dataset

iris.describe()

count 
mean
std
min
25%	first quartile
50%  median
75%  third quartile
max 	

from all the numerical columns of a dataset 

iris['sepal_length'].count() #applied to series
iris[['sepal_length','sepal_width']].count() #applied to dataframe

returns a series of counts applied to dataframe 

iris['sepal_length'].mean()
iris.mean()	#applied to entire data frame

all methods ignore null entries when calculating 
mean measures the tendency of a central value of a measurement
standard deviation measures its spread 

iris.median()

A median is special example of quantile 
if q is between 0,1 
numerical value that splits the dataset into two sets , one with fraction q of smaller observations , other with larger observations

iris.quantile(q)

coloquially quantiles are called percentiles (percentages between 0 and 100 rather than fractions between 0 and 1)

q = [0.25,0.75]
iris.quantile(q)

interquartile range between the one quarter and the three quarter quantiles 

IQR of petal_length [1.6,5.1] telling us half the data collected lies in this range

iris.min()
iris.max()

range is the interval between the largest and smallest value 

iris.plot(kind = 'box')
plt.ylabel('[cm]')
plt.show()


----------------------
df['mpg'].median()

print(df['Engineering'].min())
print(df['Engineering'].max())
# Construct the mean percentage per year: mean
mean = df.mean(axis='columns')
mean.plot() # Since 'Year' is the index of df, it will appear on the x-axis of the plot
plt.show()


-----------

Median vs Mean 

In many datasets there can be large differences due to outliers

Titanic 
# Print summary statistics of the fare column with .describe()
print(df['fare'].describe())
df['fare'].plot(kind='box')
plt.show()


	1800 1801 ............ 2015 
IND  0.5  0.7 
AUS  0.6  0.8 
PAK  0.4  0.3


# Print the number of countries reported in 2015
print(df['2015'].count())
# Print the 5th and 95th percentiles
print(df.quantile([0.05,0.95]))
# Generate a box plot
years = ['1800','1850','1900','1950','2000']
df[years].plot(kind='box')
plt.show()

208
      Unnamed: 0   1800   1801   1802  1803  ...    2012    2013   2014    2015     2016
0.05       12.95  25.40  25.30  25.20  25.2  ...  56.335  56.705  56.87  57.855  59.2555
0.95      246.05  37.92  37.35  38.37  38.0  ...  81.665  81.830  82.00  82.100  82.1650

[2 rows x 218 columns]

----------------

standard deviation of temperature

compare the distribution of daily temperatures in January and March
You will notice that while the mean values are similar, the standard deviations are quite different, 
meaning that one month had a larger fluctuation in temperature than the other.

print(january.mean(), march.mean())
print(january.std(),march.std())

-------------
Seperating populations with boolean indexing

iris['species'].describe()

count , unique , top, freq 
top: most frequent category
freq: occurences of top 
column spcies contains a categorical variable or factor 

iris['species'].unique()
array(['setosa','versicolor','virginica'])

knowing that there are three different factors, it makes sense to carry out EDA seperately on each factor

extract rows corresponding to each species 
indices = iris['species'] == 'setosa'
setosa = iris.loc[indices,:]
indices = iris['species'] == 'versicolor'
versicolor = iris.loc[indices,:]
indices = iris['species'] == 'virginica'
virginica = iris.loc[indices,:]


setosa.head()
versicolor.head()
virginica.head()


better pandas tools for performing group by operations to extract factors

iris.plot(kind='hist',bins=50,range=(0,8),alpha=0.3)
plt.title('Entire iris dataset')
plt.xlabel('[cm]')
plt.show()

setosa.plot(kind='hist',bins=50,range=(0,8),alpha=0.3)

describe_all = iris.describe()
describe_setosa = setosa.describe()

error_setosa = 100*np.abs(describe_setosa - describe_all)/describe_setosa
print(error_setosa)


--------------

df[df['origin'] == 'Asia'].count()

# Compute the global mean and global standard deviation: global_mean, global_std
global_mean = df.mean()
global_std = df.std()

# Filter the US population from the origin column: us
us = df[df['origin'] == 'US']

# Compute the US mean and US standard deviation: us_mean, us_std
us_mean = us.mean()
us_std = us.std()

# Print the differences
print(us_mean - global_mean)
print(us_std - global_std)

------------------------

3 passenger classes in Titanic

# Display the box plots on 3 separate rows and 1 column
fig, axes = plt.subplots(nrows=3, ncols=1)

# Generate a box plot of the fare prices for the First passenger class
titanic.loc[titanic['pclass'] == 1].plot(ax=axes[0], y='fare', kind='box')

# Generate a box plot of the fare prices for the Second passenger class
titanic.loc[titanic['pclass'] == 2].plot(ax=axes[1], y='fare', kind='box')

# Generate a box plot of the fare prices for the Third passenger class
titanic.loc[titanic['pclass'] == 3].plot(ax=axes[2], y='fare', kind='box')

# Display the plot
plt.show()





