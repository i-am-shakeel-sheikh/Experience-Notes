RDD

val carRDD = sc.textFile("hdfs://localhost:54310/carnew.csv")

------------------------------------------------------------------------

/* MAX , MIN , AVG Mileage of all cars in each origin */

-----------------------------------------------------------------------------

DATAFRAMES

val carDF = carRDD.map(car => {
  val r = car.split(",")
  (r(0), r(1).toFloat, r(2).toInt, r(3).toFloat, r(4).toInt , r(5).toInt , r(6).toFloat, r(7).toInt , r(8)) 
}).toDF("model", "mpg", "cylinders", "enginedisp", "horsepower", "weight" , "accelerate", "year", "origin")
carDF.show

scala> carDF.show

+--------------------+----+---------+----------+----------+------+----------+----+--------+
|               model| mpg|cylinders|enginedisp|horsepower|weight|accelerate|year|  origin|
+--------------------+----+---------+----------+----------+------+----------+----+--------+
|  amc ambassador dpl|15.0|        8|       390|       190|  3850|       8.5|  70|American|
|         amc gremlin|21.0|        6|       199|        90|  2648|      15.0|  70|American|
|          amc hornet|18.0|        6|       199|        97|  2774|      15.5|  70|American|
|       amc rebel sst|16.0|        8|       304|       150|  3433|      12.0|  70|American|
|buick estate wago...|14.0|        8|       455|       225|  3086|      10.0|  70|American|
|   buick skylark 320|15.0|        8|       350|       165|  3693|      11.5|  70|American|
|chevrolet chevell...|18.0|        8|       307|       130|  3504|      12.0|  70|American|
|    chevrolet impala|14.0|        8|       454|       220|  4354|       9.0|  70|American|
|chevrolet monte c...|15.0|        8|       400|       150|  3761|       9.5|  70|American|
|           chevy c20|10.0|        8|       307|       200|  4376|      15.0|  70|American|
| dodge challenger se|15.0|        8|       383|       170|  3563|      10.0|  70|American|
|          dodge d200|11.0|        8|       318|       210|  4382|      13.5|  70|American|
|           ford f250|10.0|        8|       360|       215|  4615|      14.0|  70|American|
|    ford galaxie 500|15.0|        8|       429|       198|  4341|      10.0|  70|American|
|       ford maverick|21.0|        6|       200|        85|  2587|      16.0|  70|American|
|         ford torino|17.0|        8|       302|       140|  3449|      10.5|  70|American|
|            hi 1200d| 9.0|        8|       304|       193|  4732|      18.5|  70|American|
|  plymouth 'cuda 340|14.0|        8|       340|       160|  3609|       8.0|  70|American|
|     plymouth duster|22.0|        6|       198|        95|  2833|      15.5|  70|American|
|   plymouth fury iii|14.0|        8|       440|       215|  4312|       8.5|  70|American|
+--------------------+----+---------+----------+----------+------+----------+----+--------+

---------------------------------------------------------------------------------------------------------------
/* Find the max mileage, average mileage and minimum mileage of all the cars in each Origin.*/

val mpgbyorigin = carDF.groupBy("origin").agg(max("mpg"), min("mpg"), avg("mpg"))
mpgbyorigin.show()



-----------------------------------------------------------------------------------------------------------------

/* Find the Year that each Origin has made the most number of cars */

val carsgroupbyOriginYear =  carsDF.groupBy("origin", "year").count()

val duplicate = carsgroupbyOriginYear.alias("duplicate")

val yearOriginMostCars = carsgroupbyOriginYear.select(carsgroupbyOriginYear.col("origin"), carsgroupbyOriginYear.col("year"), carsgroupbyOriginYear($"count")).where(carsgroupbyOriginYear.col($"count").isin(duplicate.agg(max($"count").where(carsgroupbyOriginYear.col("origin").eq(duplicate.col("origin")))))

yearOriginMostCars.show()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* List the cars (with details) for each Year with maximum mileage */

val mpgbyyear = carsDF.groupBy("year").select(carsDF.col("year"), carsDF.agg(max"mpg"))

val carsYearMaxMpg = carsDF.where(carsDF.col("year").isin(mpgbyyear.select(mpgbyyear.col("year")).where(carsDF.col($"max")).eq(mpgbyyear.col($"max"))))

carsYearMaxMpg.show()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------


		SPARKSQL


carsDF.printSchema
carsDF.registerTempTable("cars")

---------------------------------------------------------------------------------------------------------
/* Find the max mileage, average mileage and minimum mileage of all the cars in each Origin.*/

val mpgbyorigin = sqlContext.sql("select max(mpg), min(mpg) , avg(mpg) from cars group by origin")

mpgbyorigin.show()
-----------------------------------------------------------------------------------------------------------

/* Find the Year that each Origin has made the most number of cars */

val carsgroupbyOriginYear =  sqlContext.sql("select origin, year , count(*) as count from cars group by origin, year")
carsgroupbyOriginYear registerTempTable("noofcarsbyOriginYear")

val yearOriginMostCars = sqlContext.sql("select T1.origin, T1.year , T1.count from noofcarsbyOriginYear T1  where T1.count IN (select MAX(T2.number) from noofcarsbyOriginYear T2 where T1.origin = T2.origin)")

yearOriginMostCars.show()
----------------------------------------------------------------------------------------------------------------

/* List the cars (with details) for each Year with maximum mileage */

val mpgbyyear = sqlContext.sql("SELECT year, MAX(mpg) as maxmpg from cars group by year")
mpgbyyear.registerTempTable("mpgbyyear")

val carsYearMaxMpg = sqlContext.sql("select * from cars c where c.year IN (select c1.year from mpgbyyear c1 where c.mpg = c1.maxmpg)")

carsYearMaxMpg.show()
----------------------------------------------------------------------------------------------------------------------------------------------------------